{"version":3,"sources":["admin.js","jquery.textfit.js"],"names":["_typeof","Symbol","iterator","obj","constructor","prototype","$","methods","width","string","ruler","css","position","white-space","visibility","this","append","w","remove","bestfit","fs","parseInt","i","innerWrap","height","removeWrap","truncate","length","h","html","substring","fn","textfit","method","apply","Array","slice","call","arguments","error","init","el","wrapInner","replaceWith","contents","jQuery","document","ready","EDD_Compare_Settings","fields","sortable","handle","on","row","clone","count","parent","find","val","each","name","attr","replace","insertAfter","confirm","closest"],"mappings":"AAAA,YAEA,IAAIA,SAA4B,kBAAXC,SAAoD,gBAApBA,QAAOC,SAAwB,SAAUC,GAAO,aAAcA,IAAS,SAAUA,GAAO,MAAOA,IAAyB,kBAAXF,SAAyBE,EAAIC,cAAgBH,QAAUE,IAAQF,OAAOI,UAAY,eAAkBF,KCStQ,SAAWG,GAET,GAAIC,IAQFC,MAAQ,SAASC,GAIf,GAAIC,GAAQJ,EAAE,SAAWG,EAAS,WAAWE,KAC3CC,SAAgB,WAChBC,cAAgB,SAChBC,WAAgB,WACfH,IAAI,OAAQI,KAAKJ,IAAI,QAGxBL,GAAE,QAAQU,OAAON,EACjB,IAAIO,GAAIP,EAAMF,OAGd,OAFAE,GAAMQ,SAECD,GAWTE,QAAU,WASR,IARA,GAAIC,GAAKC,SAASN,KAAKJ,IAAI,aAAc,IAIrCW,EAAIC,EAAUR,MAIXO,EAAEE,SAAWT,KAAKS,UACvBT,KAAKJ,IAAI,cAAeS,EAAK,KAI/B,OADAK,GAAWH,GACJP,MAWTW,SAAW,SAASC,GAIlB,IAHA,GACIC,GADAN,EAAIC,EAAUR,MAGXO,EAAEE,SAAWT,KAAKS,UACvBI,EAAIN,EAAEO,OACNP,EAAEO,KAAKD,EAAEE,UAAU,EAAGF,EAAED,OAAO,IAC/BL,EAAEN,OAAO,MAIX,OADAS,GAAWH,GACJP,MAMXT,GAAEyB,GAAGC,QAAU,SAAUC,GAGvB,MAAK1B,GAAQ0B,GACJ1B,EAAS0B,GAASC,MAAOnB,KAAMoB,MAAM9B,UAAU+B,MAAMC,KAAMC,UAAW,IACjD,YAAlB,mBAAOL,GAAP,YAAAjC,QAAOiC,KAAyBA,MAG1C3B,GAAEiC,MAAO,UAAaN,EAAS,qCAFxB1B,EAAQiC,KAAKN,MAAOnB,KAAMuB,WAUrC,IAAIf,GAAY,SAAUkB,GAKxB,MAFAA,GAAGC,UAAUpC,EAAE,kCACDK,IAAI,QAAS8B,EAAG9B,IAAI,WAC3BL,EAAE,mBAGPmB,EAAa,SAAUgB,GACzBA,EAAGE,YAAYF,EAAGG,cAGlBC,QDrHJA,OAAOC,UAAUC,MAAM,SAAUzC,GAK7B,GAAI0C,IAEAR,KAAM,WACFzB,KAAKkC,UAGTA,OAAQ,WAEJ3C,EAAE,6BAA6B4C,UAC3BC,OAAQ,YAIZ7C,EAAE,0BAA0B8C,GAAG,QAAS,WACpC,GAAIC,GAAM/C,EAAE,+BACRgD,EAAQD,EAAIC,QACZC,EAAQF,EAAIG,SAASC,KAAM,MAAO9B,MAQtC,OAPA2B,GAAMG,KAAM,YAAaC,IAAK,IAC9BJ,EAAMG,KAAM,iBAAkBE,KAAK,WAC/B,GAAIC,GAAOtD,EAAGS,MAAO8C,KAAM,OAC3BD,GAAOA,EAAKE,QAAS,YAAa,IAAMzC,SAAUkC,GAAU,KAC5DjD,EAAGS,MAAO8C,KAAM,OAAQD,GAAOC,KAAM,KAAMD,KAE/CN,EAAMS,YAAaV,IACZ,IAIX/C,EAAE,QAAQ8C,GAAG,QAAS,gDAAiD,WACnE,GAAIY,QAAQ,+CAAgD,CACxD,GAAIT,GAAQjD,EAAE,kCAAkCqB,MAElC,KAAV4B,GACAjD,EAAE,8BAA8BoD,IAAI,IACpCpD,EAAE,0CAA0CoD,IAAI,IAChDpD,EAAE,4CAA4CoD,IAAI,IAClDpD,EAAE,8CAA8CuD,KAAK,WAAW,IAEhEvD,EAAES,MAAMkD,QAAQ,MAAM/C,SAG9B,OAAO,KAInB8B,GAAqBR","file":"admin.js","sourcesContent":["jQuery(document).ready(function ($) {\n\n    /**\n     * Settings screen JS\n     */\n    var EDD_Compare_Settings = {\n\n        init: function () {\n            this.fields();\n        },\n\n        fields: function () {\n            \n            $('#edd_compare_fields tbody').sortable( {\n                handle: '.handle',\n            } );\n            \n            // Insert new field row\n            $('#edd_add_compare_field').on('click', function() {\n                var row = $('#edd_compare_fields tr:last');\n                var clone = row.clone();\n                var count = row.parent().find( 'tr' ).length;\n                clone.find( 'td input' ).val( '' );\n                clone.find( 'input, select' ).each(function() {\n                    var name = $( this ).attr( 'name' );\n                    name = name.replace( /\\[(\\d+)\\]/, '[' + parseInt( count ) + ']');\n                    $( this ).attr( 'name', name ).attr( 'id', name );\n                });\n                clone.insertAfter( row );\n                return false;\n            });\n\n            // Remove field row\n            $('body').on('click', '#edd_compare_fields .edd_remove_compare_field', function () {\n                if (confirm(\"Are you sure you want to remove this field?\")) {\n                    var count = $('#edd_compare_fields tr:visible').length;\n\n                    if (count === 2) {\n                        $('#edd_compare_fields select').val('');\n                        $('#edd_compare_fields input[type=\"text\"]').val('');\n                        $('#edd_compare_fields input[type=\"number\"]').val('');\n                        $('#edd_compare_fields input[type=\"checkbox\"]').attr('checked', false);\n                    } else {\n                        $(this).closest('tr').remove();\n                    }\n                }\n                return false;\n            });\n        }\n    };\n    EDD_Compare_Settings.init();\n});","/**\n * jQuery Text Fit v1.0\n * https://github.com/nbrunt/TextFit\n *\n * Copyright 2013 Nick Brunt\n * http://nickbrunt.com\n *\n * Free to use and abuse under the MIT license.\n * http://www.opensource.org/licenses/mit-license.php\n */\n\n(function( $ ) {\n\n  var methods = {\n\n    /**\n     *  Width\n     *\n     *  Returns the width in pixels of the given text, based on\n     *  the font size and style of the target element.\n     */\n    width : function(string) {\n\n      // Create ruler with some default styles and font\n      // information from target element\n      var ruler = $(\"<span>\" + string + \"</span>\").css({\n        'position'    : 'absolute',\n        'white-space' : 'nowrap',\n        'visibility'  : 'hidden'\n      }).css(\"font\", this.css(\"font\"));\n\n      // Render ruler, measure, then remove\n      $(\"body\").append(ruler);\n      var w = ruler.width();\n      ruler.remove();\n\n      return w;\n    },\n\n    /**\n     *  BestFit\n     *\n     *  Adjusts the font size of the target element so that\n     *  the string fits it perfectly.\n     *\n     *  The target element must have an absolute width and height.\n     */\n    bestfit : function() {\n      var fs = parseInt(this.css(\"font-size\"), 10);\n\n      // Wrap the content of the target element in a div with\n      // with the same width\n      var i = innerWrap(this);\n\n      // Keep reducing the font size of the target element\n      // until the inner div fits\n      while (i.height() > this.height()) {\n        this.css(\"font-size\", --fs + \"px\");\n      }\n\n      removeWrap(i);\n      return this;\n    },\n\n    /**\n     *  Truncate\n     *\n     *  Trims the contents of the target element to the size\n     *  of the element.\n     *\n     *  The target element must have an absolute width and height.\n     */\n    truncate : function(length) {\n      var i = innerWrap(this);\n      var h;\n\n      while (i.height() > this.height()) {\n        h = i.html();\n        i.html(h.substring(0, h.length-4));\n        i.append(\"...\");\n      }\n\n      removeWrap(i);\n      return this;\n    }\n\n  };\n\n\n  $.fn.textfit = function( method ) {\n\n    // Method calling logic\n    if ( methods[method] ) {\n      return methods[ method ].apply( this, Array.prototype.slice.call( arguments, 1 ));\n    } else if ( typeof method === 'object' || ! method ) {\n      return methods.init.apply( this, arguments );\n    } else {\n      $.error( 'Method ' +  method + ' does not exist on jQuery.textfit' );\n    }\n\n  };\n\n\n  // Helper methods\n\n  var innerWrap = function( el ) {\n    // Wrap the content of the target element in a div with\n    // with the same width\n    el.wrapInner($(\"<div id='textfit-inner'></div>\")\n                 .css(\"width\", el.css(\"width\")));\n    return $(\"#textfit-inner\");\n  };\n\n  var removeWrap = function( el ) {\n    el.replaceWith(el.contents());\n  };\n\n})( jQuery );"]}